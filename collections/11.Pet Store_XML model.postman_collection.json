{
	"info": {
		"_postman_id": "52d76964-1671-4919-a6df-0046c3f62293",
		"name": "11.Pet Store_XML model",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23846288",
		"_collection_link": "https://speeding-escape-891515.postman.co/workspace/API-testing-with-Postman---Prac~1ee97430-877e-4c34-a2f4-cdba9b060fc6/collection/23846288-52d76964-1671-4919-a6df-0046c3f62293?action=share&source=collection_link&creator=23846288"
	},
	"item": [
		{
			"name": "Add new pet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"base_url\", \"https://petstore.swagger.io/v2\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"POST /pet - status should be 200.\", () => {",
							"    pm.response.to.have.status(200); // Check if the status code is 200",
							"})",
							"",
							"pm.test(\"Content Type Header should include application/json.\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"})",
							"",
							"pm.test(\"Response time should be less than 2s.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"})",
							"",
							"let jsonData = pm.response.json();",
							"let petId = jsonData.id;",
							"pm.collectionVariables.set(\"petId\", petId); // Store petId in collection variable for future use"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Pet>\n  <id>0</id>\n  <Category>\n    <id>0</id>\n    <name>Dog</name>\n  </Category>\n  <name>Jim</name>\n  <photoUrls>\n    <photoUrl>string</photoUrl>\n  </photoUrls>\n  <tags>\n    <Tag>\n      <id>0</id>\n      <name>string</name>\n    </Tag>\n  </tags>\n  <status>available</status>\n</Pet>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/pet",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get pet by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET /pet/petId - status should be 200.\", () => {",
							"    pm.response.to.have.status(200); // Check if the status code is 200",
							"})",
							"",
							"pm.test(\"Content Type Header should include application/json.\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"})",
							"",
							"pm.test(\"Response time should be less than 2s.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/pet/{{petId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"PUT /pet - status should be 200.\", () => {",
							"    pm.response.to.have.status(200); // Check if the status code is 200",
							"})",
							"",
							"pm.test(\"Content Type Header should include application/json.\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"})",
							"",
							"pm.test(\"Response time should be less than 2s.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"})",
							"",
							"let jsonData = pm.response.json();",
							"pm.test(\"Name should be updated.\", () => {",
							"    pm.expect(jsonData.name).to.equal(\"Boo\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Pet>\n  <id>{{petId}}</id>\n  <Category>\n    <id>0</id>\n    <name>Dog</name>\n  </Category>\n  <name>Boo</name>\n  <photoUrls>\n    <photoUrl>string</photoUrl>\n  </photoUrls>\n  <tags>\n    <Tag>\n      <id>0</id>\n      <name>friendly</name>\n    </Tag>\n  </tags>\n  <status>available</status>\n</Pet>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/pet",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE /pet/petid - status should be 200.\", () => {",
							"    pm.response.to.have.status(200); // Check if the status code is 200",
							"})",
							"",
							"pm.test(\"Content Type Header should include application/json.\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"})",
							"",
							"pm.test(\"Response time should be less than 2s.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"})",
							"",
							"pm.collectionVariables.unset(\"base_url\");",
							"pm.collectionVariables.unset(\"petId\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/pet/{{petId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		}
	]
}