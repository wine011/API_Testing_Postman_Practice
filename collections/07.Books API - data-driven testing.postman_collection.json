{
	"info": {
		"_postman_id": "05c3ad17-a9f7-437e-a166-0083b9513f28",
		"name": "07.Books API - data-driven testing",
		"description": "## 📚 Simple Books API – Postman Collection Overview\n\nThis Postman collection is designed to test a **Simple Books API** built using **Node.js**, **Express**, and **JWT authentication**.\n\nThe API was created with the help of **ChatGPT**, as part of a hands-on learning and practice project focused on backend development, RESTful API design, and API testing.\n\nIt demonstrates core RESTful API features including:\n\n- Client registration\n    \n- Book retrieval\n    \n- Order creation and management\n    \n- Token-based authorization\n    \n\n### 🧪 What This Collection Covers\n\n| Category | Endpoints |\n| --- | --- |\n| ✅ Health Check | `GET /status` |\n| 🔐 Authentication | `POST /api-clients` (generates JWT) |\n| 📚 Book Management | `GET /books`, `GET /books/:bookId` |\n| 📦 Order Management | `POST /orders`, `GET /orders`, `GET /orders/:orderId`, `PATCH /orders/:orderId`, `DELETE /orders/:orderId` |\n\n---\n\n### 🧰 Features\n\n- **Chained Requests** using `collection variables` (e.g., `{{accessToken}}`, `{{orderId}}`, `{{bookId}}`)\n    \n- **Dynamic test data** via random client email generation\n    \n- **Test scripts** to validate response codes, body structure, and logic\n    \n- **Error handling** for duplicate client registration and unauthorized access\n    \n\n---\n\n### 🔐 Authentication\n\nTo access protected endpoints (like `/orders`), a valid `accessToken` must be generated using:\n\n```\nbashCopyEditPOST /api-clients\n\n ```\n\nThe token is then used as a Bearer token in the `Authorization` header for secured requests:\n\n```\ncssCopyEditAuthorization: Bearer {{accessToken}}\n\n ```\n\n---\n\n### 🔄 Notes\n\n- This API uses an **in-memory database**, so all data resets when the server restarts.\n    \n- JWT tokens expire in 7 days.\n    \n- Duplicate registration with the same email will return an error.\n    \n- Collection variables are used for chaining and testing convenience.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23846288",
		"_collection_link": "https://speeding-escape-891515.postman.co/workspace/API-testing-with-Postman---Prac~1ee97430-877e-4c34-a2f4-cdba9b060fc6/collection/23846288-05c3ad17-a9f7-437e-a166-0083b9513f28?action=share&source=collection_link&creator=23846288"
	},
	"item": [
		{
			"name": "set up",
			"item": [
				{
					"name": "Check the api status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /status - Status should be 200.\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response time should be under 1000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"base_url\", \"http://localhost:3000\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register a new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST /api-clients - Status should be one of 200 or 201.\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response time should be under 2000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Token is present.\", () => {",
									"    pm.expect(jsonData).to.have.property(\"accessToken\");",
									"    pm.collectionVariables.set(\"token\", jsonData.accessToken);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random string",
									"//const random = Math.random().toString(36).substring(2);",
									"",
									"// Generate a random username",
									"//const username = `user${random}`;",
									"",
									"// Generate a random email using the generated username",
									"//const email = `${username}@example.com`;",
									"",
									"// Set generated values to collection variables",
									"//pm.collectionVariables.set(\"clientName\", username);",
									"//pm.collectionVariables.set(\"clientEmail\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"{{clientName}}\",\n    \"clientEmail\": \"{{clientEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api-clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Retrieve a list of books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /books - Status should be 200.\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response time should be under 2000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})",
									"",
									"let jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"bookId\", jsonData[0].id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get fiction books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /books?type=fiction - Status should be 200.\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response time should be under 2000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})",
									"",
									"let schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"    \"type\": \"array\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"number\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"type\": {\"type\": \"string\" },",
									"    \"required\": [\"id\", \"name\", \"type\"]",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books?type=fiction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the first 2 books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /books?limit=2 - Status should be 200.\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response time should be under 1000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})",
									"",
									"let schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"    \"type\": \"array\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"number\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"type\": {\"type\": \"string\" },",
									"    \"required\": [\"id\", \"name\", \"type\"]",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books?limit=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get book by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`GET /books/${pm.collectionVariables.get(\"id\")}- Status should be 200.`, () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response time should be under 1000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})",
									"",
									"let schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"number\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"type\": {\"type\": \"string\" },",
									"    \"required\": [\"id\", \"name\", \"type\"]",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"book id: \", pm.collectionVariables.get(\"id\"))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST /orders - Status should be 201.\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"Response time should be under 2000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})",
									"",
									"// Check if the response body is valid JSON before parsing",
									"let jsonData;",
									"try {",
									"    jsonData = pm.response.json();",
									"    pm.test(\"Order is created successfully.\", () => {",
									"        pm.expect(jsonData.created).to.eql(true);",
									"        pm.expect(jsonData).to.have.property(\"orderId\");",
									"        pm.collectionVariables.set(\"orderId\", jsonData.orderId);",
									"    });",
									"} catch (e) {",
									"    pm.test(\"Response body should be valid JSON.\", () => {",
									"        pm.expect.fail(\"Response body is not valid JSON: \" + e.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": {{bookId}},\n    \"customerName\": \"{{clientName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`GET /${pm.collectionVariables.get(\"orderId\")} - Status should be 200.`, () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response time should be under 1000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Order has correct details.\", () => {",
									"    pm.expect(jsonData).to.have.property(\"orderId\");",
									"    pm.expect(jsonData).to.have.property(\"bookId\");",
									"    pm.expect(jsonData).to.have.property(\"customerName\");",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders/{{orderId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /orders - Status should be 200.\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response time should be under 2000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Orders are listed.\", () => {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`PATCH /orders/${pm.collectionVariables.get(\"orderId\")} - Status should be 200.`, () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time should be under 2000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Order updated successfully.\", () => {",
									"    pm.expect(jsonData.updated).to.eql(true);",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": \"{{bookId}}\",\n    \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/{{orderId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`DELETE /orders/${pm.collectionVariables.get(\"orderId\")} - Status should be 200 or 204.`, () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.test(\"Response time should be under 1000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.collectionVariables.unset(\"orderId\");",
									"//pm.collectionVariables.unset(\"base_url\"); I need to use in negative tests.",
									"pm.collectionVariables.unset(\"token\");",
									"pm.collectionVariables.unset(\"bookId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders/{{orderId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "Register with existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 409 Conflict\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([409, 400]);",
									"});",
									"",
									"pm.test(\"Error message is returned\", () => {",
									"  const json = pm.response.json();",
									"  pm.expect(json).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Response time should be under 2000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"})",
									"",
									"pm.test(\"Content Type should be application/json.\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"David\",\n    \"clientEmail\": \"postman@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api-clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 401 Unauthorized\", () => {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time should be under 2000ms.\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"})",
									"",
									"//delete content-type header test because it responses 401.",
									"",
									"pm.collectionVariables.unset(\"base_url\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "clientName",
			"value": ""
		},
		{
			"key": "clientEmail",
			"value": ""
		}
	]
}