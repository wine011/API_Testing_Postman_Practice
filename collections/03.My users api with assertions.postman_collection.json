{
	"info": {
		"_postman_id": "73bc5ea1-d47a-42cb-a517-84b430859f77",
		"name": "03.My users api with assertions",
		"description": "### ✅ **Project Overview: Users API**\n\n**Objective**:\n\nBuild a custom **Users API** using `Node.js`, `npm`, `json-server`, and a local `JSON file` as the database.\n\n**Key Features**:\n\n- **GET /students** – Retrieve all students\n    \n- **GET /students/:id** – Retrieve a specific student by ID\n    \n- **POST /students** – Add a new student\n    \n- **PUT /students/:id** – Update an existing student's details\n    \n- **DELETE /students/:id** – Remove a student by ID\n    \n\n**Tools & Technologies**:\n\n- Node.js + npm\n    \n- `json-server` for mock API\n    \n- JSON file to simulate database\n    \n- Postman for API testing\n    \n\n**Testing**:\n\n- Included **Postman Post-response scripts** (**Tests)** for:\n    \n    - Status code validation\n        \n    - Response Time checks\n        \n    - Header checks\n        \n    - Schema validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23846288",
		"_collection_link": "https://speeding-escape-891515.postman.co/workspace/API-testing-with-Postman---Prac~1ee97430-877e-4c34-a2f4-cdba9b060fc6/collection/23846288-73bc5ea1-d47a-42cb-a517-84b430859f77?action=share&source=collection_link&creator=23846288"
	},
	"item": [
		{
			"name": "1.Get a single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET /users/2 - Status code should be 200.\", () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response Time should be below 200ms.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Content-Type Header should be application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"let schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"object\", // The response should be an array of user objects",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": {",
							"        \"type\": \"integer\"",
							"      },",
							"      \"name\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"age\": {",
							"        \"type\": \"integer\"",
							"      },",
							"      \"email\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"is_active\": {",
							"        \"type\": \"boolean\"",
							"      },",
							"      \"address\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"          \"street\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"city\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"zip\": {",
							"            \"type\": \"string\"",
							"          }",
							"        },",
							"        \"required\": [",
							"          \"street\",",
							"          \"city\",",
							"          \"zip\"",
							"        ]",
							"      }",
							"    },",
							"    \"required\": [",
							"      \"id\",",
							"      \"name\",",
							"      \"age\",",
							"      \"email\",",
							"      \"is_active\",",
							"      \"address\"",
							"    ]",
							"  }",
							"};",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"    pm.expect(jsonData).to.be.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"Name should be Bob Smith\", () => {",
							"    pm.expect(jsonData.name).to.eql(\"Bob Smith\");",
							"})",
							"",
							"pm.test(\"Id should be 2.\", () => {",
							"    pm.expect(jsonData.id).to.eql(2);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET /users - Status code should be 200.\", () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response Time should be below 200ms.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Content-Type Header should be application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"let schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"array\", // The response should be an array of user objects",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": {",
							"        \"type\": \"integer\"",
							"      },",
							"      \"name\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"age\": {",
							"        \"type\": \"integer\"",
							"      },",
							"      \"email\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"is_active\": {",
							"        \"type\": \"boolean\"",
							"      },",
							"      \"address\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"          \"street\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"city\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"zip\": {",
							"            \"type\": \"string\"",
							"          }",
							"        },",
							"        \"required\": [",
							"          \"street\",",
							"          \"city\",",
							"          \"zip\"",
							"        ]",
							"      }",
							"    },",
							"    \"required\": [",
							"      \"id\",",
							"      \"name\",",
							"      \"age\",",
							"      \"email\",",
							"      \"is_active\",",
							"      \"address\"",
							"    ]",
							"  }",
							"};",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"    pm.expect(jsonData).to.be.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"Response body is an array.\", () => {",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Users list is not empty.\", () => {",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.Get a non-existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET /users/999 - Status code should be 404. User not found.\", () => {",
							"    pm.response.to.have.status(404);",
							"})",
							"",
							"pm.test(\"Response Time should be below 200ms.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"})",
							"",
							"pm.test(\"Content-Type Header should be application/json\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 4,\r\n  \"name\": \"David Lee\",\r\n  \"age\": 30,\r\n  \"email\": \"david.lee@example.com\",\r\n  \"is_active\": true,\r\n  \"address\": {\r\n    \"street\": \"321 Birch Blvd\",\r\n    \"city\": \"Lakeside\",\r\n    \"zip\": \"90210\"\r\n  }\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/users/999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "4.Create a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"POST /users - Status code should be 201.\", () => {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.have.status(\"Created\");",
							"});",
							"",
							"pm.test(\"Content-Type Header should be application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is under 1000ms\", () =>  {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"pm.test(\"Response body contains correct data\", () => {",
							"    pm.expect(jsonData.name).to.eql(\"Carol Williams\");",
							"    pm.expect(jsonData.email).to.eql(\"carol.williams@example.com\");",
							"    pm.expect(jsonData.address.city).to.eql(\"Greenville\");",
							"    pm.expect(jsonData.is_active).to.be.true;",
							"});",
							"",
							"let schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"age\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"email\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"is_active\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"address\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"street\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"city\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"zip\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"street\",",
							"        \"city\",",
							"        \"zip\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"name\",",
							"    \"age\",",
							"    \"email\",",
							"    \"is_active\",",
							"    \"address\"",
							"  ]",
							"};",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"    pm.expect(jsonData).to.be.jsonSchema(schema);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"Carol Williams\",\r\n    \"age\": 42,\r\n    \"email\": \"carol.williams@example.com\",\r\n    \"is_active\": true,\r\n    \"address\": {\r\n        \"street\": \"789 Pine Rd\",\r\n        \"city\": \"Greenville\",\r\n        \"zip\": \"29607\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.Edit/Update an existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"PUT /users/3 - Status code should be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type Header should be application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is under 1000ms\", () =>  {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"let schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"age\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"email\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"is_active\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"address\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"street\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"city\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"zip\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"street\",",
							"        \"city\",",
							"        \"zip\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"name\",",
							"    \"age\",",
							"    \"email\",",
							"    \"is_active\",",
							"    \"address\"",
							"  ]",
							"};",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"    pm.expect(jsonData).to.be.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"Updated age should be 40.\", () => {",
							"    pm.expect(jsonData.age).to.eql(40);",
							"})",
							"",
							"pm.test(\"Updated is_active status should be false.\", () => {",
							"    pm.expect(jsonData.is_active).to.eql(false);",
							"})",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"Carol Williams\",\r\n    \"age\": 40,\r\n    \"email\": \"carol.williams@example.com\",\r\n    \"is_active\": false,\r\n    \"address\": {\r\n        \"street\": \"789 Pine Rd\",\r\n        \"city\": \"Greenville\",\r\n        \"zip\": \"29607\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.Delete the existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE /users/3 - Status code should be 200 or 204.\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
							"})",
							"",
							"pm.test(\"Response time should be below 200ms.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Content-Type Header should be application/json\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "7.Delete a non-existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE /users/29 - Status code should be 200 or 404 for deleting a non-existing user.\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // Check if the status code is 200 or 404",
							"})",
							"",
							"pm.test(\"Response Time should be below 200ms.\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"})",
							"",
							"pm.test(\"Content-Type Header should be application/json\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/users/29",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"29"
					]
				}
			},
			"response": []
		}
	]
}